// Code generated by protoc-gen-go.
// source: grpcpropose.proto
// DO NOT EDIT!

/*
Package replica is a generated protocol buffer package.

It is generated from these files:
	grpcpropose.proto
	grpcreplica.proto

It has these top-level messages:
	Empty
	Command
	Proposal
	ProposalReply
	ProposalReplyTS
	ProposalRead
	ProposalReadReply
	Beacon
	BeaconReply
	PingArgs
	Preparation
	PreparationReply
	PreAcceptance
	PreAcceptanceReply
	PreAcceptanceOk
	Acceptance
	AcceptanceReply
	TryCommit
	TryCommitShort
	TryPreAcceptance
	TryPreAcceptanceReply
*/
package replica

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for GrpcPropose service

type GrpcProposeClient interface {
	ReplyProposeTS(ctx context.Context, in *ProposalReplyTS, opts ...grpc.CallOption) (*Empty, error)
}

type grpcProposeClient struct {
	cc *grpc.ClientConn
}

func NewGrpcProposeClient(cc *grpc.ClientConn) GrpcProposeClient {
	return &grpcProposeClient{cc}
}

func (c *grpcProposeClient) ReplyProposeTS(ctx context.Context, in *ProposalReplyTS, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcPropose/ReplyProposeTS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GrpcPropose service

type GrpcProposeServer interface {
	ReplyProposeTS(context.Context, *ProposalReplyTS) (*Empty, error)
}

func RegisterGrpcProposeServer(s *grpc.Server, srv GrpcProposeServer) {
	s.RegisterService(&_GrpcPropose_serviceDesc, srv)
}

func _GrpcPropose_ReplyProposeTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProposalReplyTS)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcProposeServer).ReplyProposeTS(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _GrpcPropose_serviceDesc = grpc.ServiceDesc{
	ServiceName: "replica.GrpcPropose",
	HandlerType: (*GrpcProposeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplyProposeTS",
			Handler:    _GrpcPropose_ReplyProposeTS_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 108 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x2f, 0x2a, 0x48,
	0x2e, 0x28, 0xca, 0x2f, 0xc8, 0x2f, 0x4e, 0xd5, 0x03, 0xd2, 0x25, 0xf9, 0x42, 0xec, 0x45, 0xa9,
	0x05, 0x39, 0x99, 0xc9, 0x89, 0x52, 0x60, 0x39, 0x28, 0x07, 0x22, 0x67, 0xe4, 0xcd, 0xc5, 0xed,
	0x0e, 0x14, 0x0c, 0x80, 0x68, 0x10, 0xb2, 0xe1, 0xe2, 0x0b, 0x02, 0xca, 0x57, 0x42, 0xf9, 0x21,
	0xc1, 0x42, 0x12, 0x7a, 0x30, 0x0d, 0x10, 0xb1, 0xc4, 0x1c, 0xb0, 0x82, 0x90, 0x60, 0x29, 0x3e,
	0xb8, 0x8c, 0x6b, 0x6e, 0x41, 0x49, 0xa5, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x4c, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x4a, 0x9f, 0x85, 0xea, 0x84, 0x00, 0x00, 0x00,
}
