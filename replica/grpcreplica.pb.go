// Code generated by protoc-gen-go.
// source: grpcreplica.proto
// DO NOT EDIT!

/*
Package replica is a generated protocol buffer package.

It is generated from these files:
	grpcreplica.proto

It has these top-level messages:
	Empty
	Command
	Proposal
	ProposalReply
	ProposalReplyTS
	Key
	Value
	ProposalRead
	ProposalReadReply
	Beacon
	BeaconReply
	PingArgs
	Preparation
	PreparationReply
	PreAcceptance
	PreAcceptanceReply
	PreAcceptanceOk
	Acceptance
	AcceptanceReply
	TryCommit
	TryCommitShort
	TryPreAcceptance
	TryPreAcceptanceReply
*/
package replica

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Status int32

const (
	Status_NONE           Status = 0
	Status_PREACCEPTED    Status = 1
	Status_PREACCEPTED_EQ Status = 2
	Status_ACCEPTED       Status = 3
	Status_COMMITTED      Status = 4
	Status_EXECUTED       Status = 5
)

var Status_name = map[int32]string{
	0: "NONE",
	1: "PREACCEPTED",
	2: "PREACCEPTED_EQ",
	3: "ACCEPTED",
	4: "COMMITTED",
	5: "EXECUTED",
}
var Status_value = map[string]int32{
	"NONE":           0,
	"PREACCEPTED":    1,
	"PREACCEPTED_EQ": 2,
	"ACCEPTED":       3,
	"COMMITTED":      4,
	"EXECUTED":       5,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Command_Operation int32

const (
	Command_NOP    Command_Operation = 0
	Command_PUT    Command_Operation = 1
	Command_GET    Command_Operation = 2
	Command_DELETE Command_Operation = 3
	Command_RLOCK  Command_Operation = 4
	Command_WLOCK  Command_Operation = 5
)

var Command_Operation_name = map[int32]string{
	0: "NOP",
	1: "PUT",
	2: "GET",
	3: "DELETE",
	4: "RLOCK",
	5: "WLOCK",
}
var Command_Operation_value = map[string]int32{
	"NOP":    0,
	"PUT":    1,
	"GET":    2,
	"DELETE": 3,
	"RLOCK":  4,
	"WLOCK":  5,
}

func (x Command_Operation) String() string {
	return proto.EnumName(Command_Operation_name, int32(x))
}
func (Command_Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Command struct {
	Operation Command_Operation `protobuf:"varint,1,opt,name=operation,enum=replica.Command_Operation" json:"operation,omitempty"`
	Key       string            `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value     string            `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Proposal struct {
	CommandId int32    `protobuf:"varint,1,opt,name=command_id" json:"command_id,omitempty"`
	Command   *Command `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Timestamp int64    `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Client    int32    `protobuf:"varint,4,opt,name=client" json:"client,omitempty"`
}

func (m *Proposal) Reset()                    { *m = Proposal{} }
func (m *Proposal) String() string            { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()               {}
func (*Proposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Proposal) GetCommand() *Command {
	if m != nil {
		return m.Command
	}
	return nil
}

type ProposalReply struct {
	Ok      bool  `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Command int32 `protobuf:"varint,2,opt,name=command" json:"command,omitempty"`
	Client  int32 `protobuf:"varint,3,opt,name=client" json:"client,omitempty"`
}

func (m *ProposalReply) Reset()                    { *m = ProposalReply{} }
func (m *ProposalReply) String() string            { return proto.CompactTextString(m) }
func (*ProposalReply) ProtoMessage()               {}
func (*ProposalReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ProposalReplyTS struct {
	Ok        bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Command   int32  `protobuf:"varint,2,opt,name=command" json:"command,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Client    int32  `protobuf:"varint,5,opt,name=client" json:"client,omitempty"`
}

func (m *ProposalReplyTS) Reset()                    { *m = ProposalReplyTS{} }
func (m *ProposalReplyTS) String() string            { return proto.CompactTextString(m) }
func (*ProposalReplyTS) ProtoMessage()               {}
func (*ProposalReplyTS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Key struct {
	Command int32  `protobuf:"varint,1,opt,name=command" json:"command,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Value struct {
	Command int32  `protobuf:"varint,1,opt,name=command" json:"command,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ProposalRead struct {
	CommandId int32    `protobuf:"varint,1,opt,name=command_id" json:"command_id,omitempty"`
	Command   *Command `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Key       string   `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *ProposalRead) Reset()                    { *m = ProposalRead{} }
func (m *ProposalRead) String() string            { return proto.CompactTextString(m) }
func (*ProposalRead) ProtoMessage()               {}
func (*ProposalRead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProposalRead) GetCommand() *Command {
	if m != nil {
		return m.Command
	}
	return nil
}

type ProposalReadReply struct {
	Command int32  `protobuf:"varint,1,opt,name=command" json:"command,omitempty"`
	Ok      int32  `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *ProposalReadReply) Reset()                    { *m = ProposalReadReply{} }
func (m *ProposalReadReply) String() string            { return proto.CompactTextString(m) }
func (*ProposalReadReply) ProtoMessage()               {}
func (*ProposalReadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Beacon struct {
	Replica   int32  `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Beacon) Reset()                    { *m = Beacon{} }
func (m *Beacon) String() string            { return proto.CompactTextString(m) }
func (*Beacon) ProtoMessage()               {}
func (*Beacon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type BeaconReply struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Replica   int32  `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
}

func (m *BeaconReply) Reset()                    { *m = BeaconReply{} }
func (m *BeaconReply) String() string            { return proto.CompactTextString(m) }
func (*BeaconReply) ProtoMessage()               {}
func (*BeaconReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type PingArgs struct {
	ActAsLeader int32 `protobuf:"varint,1,opt,name=act_as_leader" json:"act_as_leader,omitempty"`
}

func (m *PingArgs) Reset()                    { *m = PingArgs{} }
func (m *PingArgs) String() string            { return proto.CompactTextString(m) }
func (*PingArgs) ProtoMessage()               {}
func (*PingArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type Preparation struct {
	Leader   int32 `protobuf:"varint,1,opt,name=leader" json:"leader,omitempty"`
	Replica  int32 `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32 `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ballot   int32 `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
}

func (m *Preparation) Reset()                    { *m = Preparation{} }
func (m *Preparation) String() string            { return proto.CompactTextString(m) }
func (*Preparation) ProtoMessage()               {}
func (*Preparation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type PreparationReply struct {
	Acceptor int32      `protobuf:"varint,1,opt,name=acceptor" json:"acceptor,omitempty"`
	Replica  int32      `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32      `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ok       bool       `protobuf:"varint,4,opt,name=ok" json:"ok,omitempty"`
	Ballot   int32      `protobuf:"varint,5,opt,name=ballot" json:"ballot,omitempty"`
	Status   Status     `protobuf:"varint,6,opt,name=status,enum=replica.Status" json:"status,omitempty"`
	Commands []*Command `protobuf:"bytes,7,rep,name=commands" json:"commands,omitempty"`
	Seq      int32      `protobuf:"varint,8,opt,name=seq" json:"seq,omitempty"`
	Deps     []int32    `protobuf:"varint,9,rep,packed,name=deps" json:"deps,omitempty"`
}

func (m *PreparationReply) Reset()                    { *m = PreparationReply{} }
func (m *PreparationReply) String() string            { return proto.CompactTextString(m) }
func (*PreparationReply) ProtoMessage()               {}
func (*PreparationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PreparationReply) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

type PreAcceptance struct {
	Leader   int32      `protobuf:"varint,1,opt,name=leader" json:"leader,omitempty"`
	Replica  int32      `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32      `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ballot   int32      `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
	Commands []*Command `protobuf:"bytes,5,rep,name=commands" json:"commands,omitempty"`
	Seq      int32      `protobuf:"varint,6,opt,name=seq" json:"seq,omitempty"`
	Deps     []int32    `protobuf:"varint,7,rep,packed,name=deps" json:"deps,omitempty"`
}

func (m *PreAcceptance) Reset()                    { *m = PreAcceptance{} }
func (m *PreAcceptance) String() string            { return proto.CompactTextString(m) }
func (*PreAcceptance) ProtoMessage()               {}
func (*PreAcceptance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PreAcceptance) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

type PreAcceptanceReply struct {
	Replica       int32   `protobuf:"varint,1,opt,name=replica" json:"replica,omitempty"`
	Instance      int32   `protobuf:"varint,2,opt,name=instance" json:"instance,omitempty"`
	Ok            bool    `protobuf:"varint,3,opt,name=ok" json:"ok,omitempty"`
	Ballot        int32   `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
	Seq           int32   `protobuf:"varint,5,opt,name=seq" json:"seq,omitempty"`
	Deps          []int32 `protobuf:"varint,6,rep,packed,name=deps" json:"deps,omitempty"`
	CommittedDeps []int32 `protobuf:"varint,7,rep,packed,name=committed_deps" json:"committed_deps,omitempty"`
}

func (m *PreAcceptanceReply) Reset()                    { *m = PreAcceptanceReply{} }
func (m *PreAcceptanceReply) String() string            { return proto.CompactTextString(m) }
func (*PreAcceptanceReply) ProtoMessage()               {}
func (*PreAcceptanceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type PreAcceptanceOk struct {
	Instance int32 `protobuf:"varint,1,opt,name=instance" json:"instance,omitempty"`
}

func (m *PreAcceptanceOk) Reset()                    { *m = PreAcceptanceOk{} }
func (m *PreAcceptanceOk) String() string            { return proto.CompactTextString(m) }
func (*PreAcceptanceOk) ProtoMessage()               {}
func (*PreAcceptanceOk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type Acceptance struct {
	Leader   int32   `protobuf:"varint,1,opt,name=leader" json:"leader,omitempty"`
	Replica  int32   `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32   `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ballot   int32   `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
	Count    int32   `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Seq      int32   `protobuf:"varint,6,opt,name=seq" json:"seq,omitempty"`
	Deps     []int32 `protobuf:"varint,7,rep,packed,name=deps" json:"deps,omitempty"`
}

func (m *Acceptance) Reset()                    { *m = Acceptance{} }
func (m *Acceptance) String() string            { return proto.CompactTextString(m) }
func (*Acceptance) ProtoMessage()               {}
func (*Acceptance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type AcceptanceReply struct {
	Replica  int32 `protobuf:"varint,1,opt,name=replica" json:"replica,omitempty"`
	Instance int32 `protobuf:"varint,2,opt,name=instance" json:"instance,omitempty"`
	Ok       bool  `protobuf:"varint,3,opt,name=ok" json:"ok,omitempty"`
	Ballot   int32 `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
}

func (m *AcceptanceReply) Reset()                    { *m = AcceptanceReply{} }
func (m *AcceptanceReply) String() string            { return proto.CompactTextString(m) }
func (*AcceptanceReply) ProtoMessage()               {}
func (*AcceptanceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type TryCommit struct {
	Leader   int32      `protobuf:"varint,1,opt,name=leader" json:"leader,omitempty"`
	Replica  int32      `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32      `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Commands []*Command `protobuf:"bytes,4,rep,name=commands" json:"commands,omitempty"`
	Seq      int32      `protobuf:"varint,5,opt,name=seq" json:"seq,omitempty"`
	Deps     []int32    `protobuf:"varint,6,rep,packed,name=deps" json:"deps,omitempty"`
}

func (m *TryCommit) Reset()                    { *m = TryCommit{} }
func (m *TryCommit) String() string            { return proto.CompactTextString(m) }
func (*TryCommit) ProtoMessage()               {}
func (*TryCommit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TryCommit) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

type TryCommitShort struct {
	Leader   int32   `protobuf:"varint,1,opt,name=leader" json:"leader,omitempty"`
	Replica  int32   `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32   `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Count    int32   `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Seq      int32   `protobuf:"varint,5,opt,name=seq" json:"seq,omitempty"`
	Deps     []int32 `protobuf:"varint,6,rep,packed,name=deps" json:"deps,omitempty"`
}

func (m *TryCommitShort) Reset()                    { *m = TryCommitShort{} }
func (m *TryCommitShort) String() string            { return proto.CompactTextString(m) }
func (*TryCommitShort) ProtoMessage()               {}
func (*TryCommitShort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type TryPreAcceptance struct {
	Leader   int32      `protobuf:"varint,1,opt,name=leader" json:"leader,omitempty"`
	Replica  int32      `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32      `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ballot   int32      `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
	Commands []*Command `protobuf:"bytes,5,rep,name=commands" json:"commands,omitempty"`
	Seq      int32      `protobuf:"varint,6,opt,name=seq" json:"seq,omitempty"`
	Deps     []int32    `protobuf:"varint,7,rep,packed,name=deps" json:"deps,omitempty"`
}

func (m *TryPreAcceptance) Reset()                    { *m = TryPreAcceptance{} }
func (m *TryPreAcceptance) String() string            { return proto.CompactTextString(m) }
func (*TryPreAcceptance) ProtoMessage()               {}
func (*TryPreAcceptance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *TryPreAcceptance) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

type TryPreAcceptanceReply struct {
	Acceptor         int32  `protobuf:"varint,1,opt,name=acceptor" json:"acceptor,omitempty"`
	Replica          int32  `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance         int32  `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ok               bool   `protobuf:"varint,4,opt,name=ok" json:"ok,omitempty"`
	Ballot           int32  `protobuf:"varint,5,opt,name=ballot" json:"ballot,omitempty"`
	ConflictReplica  int32  `protobuf:"varint,6,opt,name=conflict_replica" json:"conflict_replica,omitempty"`
	ConflictInstance int32  `protobuf:"varint,7,opt,name=conflict_instance" json:"conflict_instance,omitempty"`
	ConflictStatus   Status `protobuf:"varint,8,opt,name=conflict_status,enum=replica.Status" json:"conflict_status,omitempty"`
}

func (m *TryPreAcceptanceReply) Reset()                    { *m = TryPreAcceptanceReply{} }
func (m *TryPreAcceptanceReply) String() string            { return proto.CompactTextString(m) }
func (*TryPreAcceptanceReply) ProtoMessage()               {}
func (*TryPreAcceptanceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func init() {
	proto.RegisterType((*Empty)(nil), "replica.Empty")
	proto.RegisterType((*Command)(nil), "replica.Command")
	proto.RegisterType((*Proposal)(nil), "replica.Proposal")
	proto.RegisterType((*ProposalReply)(nil), "replica.ProposalReply")
	proto.RegisterType((*ProposalReplyTS)(nil), "replica.ProposalReplyTS")
	proto.RegisterType((*Key)(nil), "replica.Key")
	proto.RegisterType((*Value)(nil), "replica.Value")
	proto.RegisterType((*ProposalRead)(nil), "replica.ProposalRead")
	proto.RegisterType((*ProposalReadReply)(nil), "replica.ProposalReadReply")
	proto.RegisterType((*Beacon)(nil), "replica.Beacon")
	proto.RegisterType((*BeaconReply)(nil), "replica.BeaconReply")
	proto.RegisterType((*PingArgs)(nil), "replica.PingArgs")
	proto.RegisterType((*Preparation)(nil), "replica.Preparation")
	proto.RegisterType((*PreparationReply)(nil), "replica.PreparationReply")
	proto.RegisterType((*PreAcceptance)(nil), "replica.PreAcceptance")
	proto.RegisterType((*PreAcceptanceReply)(nil), "replica.PreAcceptanceReply")
	proto.RegisterType((*PreAcceptanceOk)(nil), "replica.PreAcceptanceOk")
	proto.RegisterType((*Acceptance)(nil), "replica.Acceptance")
	proto.RegisterType((*AcceptanceReply)(nil), "replica.AcceptanceReply")
	proto.RegisterType((*TryCommit)(nil), "replica.TryCommit")
	proto.RegisterType((*TryCommitShort)(nil), "replica.TryCommitShort")
	proto.RegisterType((*TryPreAcceptance)(nil), "replica.TryPreAcceptance")
	proto.RegisterType((*TryPreAcceptanceReply)(nil), "replica.TryPreAcceptanceReply")
	proto.RegisterEnum("replica.Status", Status_name, Status_value)
	proto.RegisterEnum("replica.Command_Operation", Command_Operation_name, Command_Operation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for GrpcReplica service

type GrpcReplicaClient interface {
	Ping(ctx context.Context, in *Beacon, opts ...grpc.CallOption) (*Empty, error)
	ReplyPing(ctx context.Context, in *BeaconReply, opts ...grpc.CallOption) (*Empty, error)
	Propose(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Empty, error)
	ReplyPropose(ctx context.Context, in *ProposalReply, opts ...grpc.CallOption) (*Empty, error)
	ReplyProposeTS(ctx context.Context, in *ProposalReplyTS, opts ...grpc.CallOption) (*Empty, error)
	Read(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Empty, error)
	ReplyRead(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Empty, error)
	ProposeAndRead(ctx context.Context, in *ProposalRead, opts ...grpc.CallOption) (*Empty, error)
	ReplyProposeAndRead(ctx context.Context, in *ProposalReadReply, opts ...grpc.CallOption) (*Empty, error)
	Prepare(ctx context.Context, in *Preparation, opts ...grpc.CallOption) (*Empty, error)
	ReplyPrepare(ctx context.Context, in *PreparationReply, opts ...grpc.CallOption) (*Empty, error)
	TryPreAccept(ctx context.Context, in *TryPreAcceptance, opts ...grpc.CallOption) (*Empty, error)
	ReplyTryPreAccept(ctx context.Context, in *TryPreAcceptanceReply, opts ...grpc.CallOption) (*Empty, error)
	PreAccept(ctx context.Context, in *PreAcceptance, opts ...grpc.CallOption) (*Empty, error)
	ReplyPreAccept(ctx context.Context, in *PreAcceptanceReply, opts ...grpc.CallOption) (*Empty, error)
	PreAcceptOK(ctx context.Context, in *PreAcceptanceOk, opts ...grpc.CallOption) (*Empty, error)
	Accept(ctx context.Context, in *Acceptance, opts ...grpc.CallOption) (*Empty, error)
	ReplyAccept(ctx context.Context, in *AcceptanceReply, opts ...grpc.CallOption) (*Empty, error)
	Commit(ctx context.Context, in *TryCommit, opts ...grpc.CallOption) (*Empty, error)
	CommitShort(ctx context.Context, in *TryCommitShort, opts ...grpc.CallOption) (*Empty, error)
}

type grpcReplicaClient struct {
	cc *grpc.ClientConn
}

func NewGrpcReplicaClient(cc *grpc.ClientConn) GrpcReplicaClient {
	return &grpcReplicaClient{cc}
}

func (c *grpcReplicaClient) Ping(ctx context.Context, in *Beacon, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) ReplyPing(ctx context.Context, in *BeaconReply, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/ReplyPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) Propose(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/Propose", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) ReplyPropose(ctx context.Context, in *ProposalReply, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/ReplyPropose", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) ReplyProposeTS(ctx context.Context, in *ProposalReplyTS, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/ReplyProposeTS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) Read(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) ReplyRead(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/ReplyRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) ProposeAndRead(ctx context.Context, in *ProposalRead, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/ProposeAndRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) ReplyProposeAndRead(ctx context.Context, in *ProposalReadReply, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/ReplyProposeAndRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) Prepare(ctx context.Context, in *Preparation, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/Prepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) ReplyPrepare(ctx context.Context, in *PreparationReply, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/ReplyPrepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) TryPreAccept(ctx context.Context, in *TryPreAcceptance, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/TryPreAccept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) ReplyTryPreAccept(ctx context.Context, in *TryPreAcceptanceReply, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/ReplyTryPreAccept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) PreAccept(ctx context.Context, in *PreAcceptance, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/PreAccept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) ReplyPreAccept(ctx context.Context, in *PreAcceptanceReply, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/ReplyPreAccept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) PreAcceptOK(ctx context.Context, in *PreAcceptanceOk, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/PreAcceptOK", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) Accept(ctx context.Context, in *Acceptance, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/Accept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) ReplyAccept(ctx context.Context, in *AcceptanceReply, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/ReplyAccept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) Commit(ctx context.Context, in *TryCommit, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcReplicaClient) CommitShort(ctx context.Context, in *TryCommitShort, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/replica.GrpcReplica/CommitShort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GrpcReplica service

type GrpcReplicaServer interface {
	Ping(context.Context, *Beacon) (*Empty, error)
	ReplyPing(context.Context, *BeaconReply) (*Empty, error)
	Propose(context.Context, *Proposal) (*Empty, error)
	ReplyPropose(context.Context, *ProposalReply) (*Empty, error)
	ReplyProposeTS(context.Context, *ProposalReplyTS) (*Empty, error)
	Read(context.Context, *Key) (*Empty, error)
	ReplyRead(context.Context, *Value) (*Empty, error)
	ProposeAndRead(context.Context, *ProposalRead) (*Empty, error)
	ReplyProposeAndRead(context.Context, *ProposalReadReply) (*Empty, error)
	Prepare(context.Context, *Preparation) (*Empty, error)
	ReplyPrepare(context.Context, *PreparationReply) (*Empty, error)
	TryPreAccept(context.Context, *TryPreAcceptance) (*Empty, error)
	ReplyTryPreAccept(context.Context, *TryPreAcceptanceReply) (*Empty, error)
	PreAccept(context.Context, *PreAcceptance) (*Empty, error)
	ReplyPreAccept(context.Context, *PreAcceptanceReply) (*Empty, error)
	PreAcceptOK(context.Context, *PreAcceptanceOk) (*Empty, error)
	Accept(context.Context, *Acceptance) (*Empty, error)
	ReplyAccept(context.Context, *AcceptanceReply) (*Empty, error)
	Commit(context.Context, *TryCommit) (*Empty, error)
	CommitShort(context.Context, *TryCommitShort) (*Empty, error)
}

func RegisterGrpcReplicaServer(s *grpc.Server, srv GrpcReplicaServer) {
	s.RegisterService(&_GrpcReplica_serviceDesc, srv)
}

func _GrpcReplica_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_ReplyPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BeaconReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).ReplyPing(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).Propose(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_ReplyPropose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProposalReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).ReplyPropose(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_ReplyProposeTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProposalReplyTS)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).ReplyProposeTS(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).Read(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_ReplyRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).ReplyRead(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_ProposeAndRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProposalRead)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).ProposeAndRead(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_ReplyProposeAndRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProposalReadReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).ReplyProposeAndRead(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Preparation)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).Prepare(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_ReplyPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PreparationReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).ReplyPrepare(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_TryPreAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TryPreAcceptance)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).TryPreAccept(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_ReplyTryPreAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TryPreAcceptanceReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).ReplyTryPreAccept(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_PreAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PreAcceptance)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).PreAccept(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_ReplyPreAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PreAcceptanceReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).ReplyPreAccept(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_PreAcceptOK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PreAcceptanceOk)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).PreAcceptOK(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Acceptance)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).Accept(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_ReplyAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AcceptanceReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).ReplyAccept(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TryCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).Commit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GrpcReplica_CommitShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TryCommitShort)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GrpcReplicaServer).CommitShort(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _GrpcReplica_serviceDesc = grpc.ServiceDesc{
	ServiceName: "replica.GrpcReplica",
	HandlerType: (*GrpcReplicaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GrpcReplica_Ping_Handler,
		},
		{
			MethodName: "ReplyPing",
			Handler:    _GrpcReplica_ReplyPing_Handler,
		},
		{
			MethodName: "Propose",
			Handler:    _GrpcReplica_Propose_Handler,
		},
		{
			MethodName: "ReplyPropose",
			Handler:    _GrpcReplica_ReplyPropose_Handler,
		},
		{
			MethodName: "ReplyProposeTS",
			Handler:    _GrpcReplica_ReplyProposeTS_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _GrpcReplica_Read_Handler,
		},
		{
			MethodName: "ReplyRead",
			Handler:    _GrpcReplica_ReplyRead_Handler,
		},
		{
			MethodName: "ProposeAndRead",
			Handler:    _GrpcReplica_ProposeAndRead_Handler,
		},
		{
			MethodName: "ReplyProposeAndRead",
			Handler:    _GrpcReplica_ReplyProposeAndRead_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _GrpcReplica_Prepare_Handler,
		},
		{
			MethodName: "ReplyPrepare",
			Handler:    _GrpcReplica_ReplyPrepare_Handler,
		},
		{
			MethodName: "TryPreAccept",
			Handler:    _GrpcReplica_TryPreAccept_Handler,
		},
		{
			MethodName: "ReplyTryPreAccept",
			Handler:    _GrpcReplica_ReplyTryPreAccept_Handler,
		},
		{
			MethodName: "PreAccept",
			Handler:    _GrpcReplica_PreAccept_Handler,
		},
		{
			MethodName: "ReplyPreAccept",
			Handler:    _GrpcReplica_ReplyPreAccept_Handler,
		},
		{
			MethodName: "PreAcceptOK",
			Handler:    _GrpcReplica_PreAcceptOK_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _GrpcReplica_Accept_Handler,
		},
		{
			MethodName: "ReplyAccept",
			Handler:    _GrpcReplica_ReplyAccept_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _GrpcReplica_Commit_Handler,
		},
		{
			MethodName: "CommitShort",
			Handler:    _GrpcReplica_CommitShort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 1020 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0xe3, 0xff, 0x93, 0xdd, 0xc4, 0x99, 0xb2, 0xe0, 0x2e, 0x12, 0xb4, 0xae, 0x04, 0x05,
	0xd1, 0x45, 0xdd, 0x0a, 0x89, 0x8a, 0x4a, 0xd5, 0x36, 0xb5, 0x0a, 0xda, 0x76, 0x13, 0xb2, 0x29,
	0x70, 0x17, 0xbc, 0x8e, 0x59, 0xa2, 0x4d, 0x62, 0xd7, 0xf6, 0x22, 0xe5, 0x82, 0x0b, 0x5e, 0x80,
	0x3b, 0x24, 0xae, 0x78, 0x1d, 0x9e, 0x85, 0xb7, 0x60, 0x7e, 0xec, 0xc9, 0x38, 0x1e, 0x07, 0x58,
	0x2d, 0x52, 0xef, 0xec, 0x39, 0xe7, 0x3b, 0xdf, 0xe7, 0xf3, 0x33, 0x33, 0x86, 0xde, 0x79, 0x9a,
	0x84, 0x69, 0x94, 0xcc, 0x67, 0x61, 0x70, 0x90, 0xa4, 0x71, 0x1e, 0x23, 0xb3, 0x78, 0xf5, 0x4c,
	0xd0, 0xfd, 0x45, 0x92, 0xaf, 0xbc, 0x3f, 0x14, 0x30, 0xfb, 0xf1, 0x62, 0x11, 0x2c, 0xa7, 0xe8,
	0x3e, 0xd8, 0x71, 0x12, 0xa5, 0x41, 0x3e, 0x8b, 0x97, 0xae, 0x72, 0x5b, 0xb9, 0xd7, 0x39, 0xdc,
	0x3f, 0x28, 0x03, 0x14, 0x4e, 0x07, 0x83, 0xd2, 0x03, 0xb5, 0x41, 0xbd, 0x88, 0x56, 0x6e, 0x0b,
	0x3b, 0xda, 0x68, 0x17, 0xf4, 0x9f, 0x82, 0xf9, 0x65, 0xe4, 0xaa, 0xe4, 0xd5, 0xfb, 0x12, 0xec,
	0xb5, 0xa3, 0x09, 0xea, 0xc9, 0x60, 0xe8, 0xdc, 0x20, 0x0f, 0xc3, 0x57, 0x63, 0x47, 0x21, 0x0f,
	0xcf, 0xfd, 0xb1, 0xd3, 0x42, 0x00, 0xc6, 0x33, 0xff, 0x85, 0x3f, 0xf6, 0x1d, 0x15, 0xd9, 0xa0,
	0x8f, 0x5e, 0x0c, 0xfa, 0xc7, 0x8e, 0x46, 0x1e, 0xbf, 0xa5, 0x8f, 0xba, 0x37, 0x05, 0x6b, 0x98,
	0xc6, 0x49, 0x9c, 0x05, 0x73, 0x84, 0xdd, 0x43, 0x26, 0x63, 0x32, 0x9b, 0x52, 0x85, 0x3a, 0xba,
	0x03, 0x66, 0xb1, 0x46, 0x95, 0xb4, 0x0f, 0x9d, 0x4d, 0xc9, 0xa8, 0x07, 0x76, 0x3e, 0x5b, 0x44,
	0x59, 0x1e, 0x2c, 0x12, 0xaa, 0x4f, 0x45, 0x1d, 0x30, 0xc2, 0xf9, 0x2c, 0x5a, 0xe6, 0xae, 0x46,
	0xa2, 0x78, 0x8f, 0x61, 0xb7, 0x64, 0x19, 0x61, 0xf4, 0x0a, 0x33, 0xb5, 0xe2, 0x0b, 0x4a, 0x61,
	0xa1, 0x6e, 0x95, 0x42, 0x17, 0xd0, 0x2a, 0x45, 0x7f, 0x0f, 0xdd, 0x0a, 0x7a, 0x7c, 0xba, 0x1d,
	0x5f, 0x4d, 0x56, 0x55, 0x9f, 0xb6, 0xa1, 0x4f, 0xa7, 0x0c, 0x77, 0x41, 0x3d, 0x8e, 0x56, 0x62,
	0x24, 0xf6, 0xf5, 0x62, 0x0d, 0xbc, 0x0f, 0x41, 0xff, 0x86, 0x84, 0xad, 0xbb, 0x71, 0x42, 0xe6,
	0x38, 0x82, 0x9d, 0xb5, 0xde, 0x60, 0x7a, 0xd5, 0xbc, 0x16, 0xe4, 0xac, 0xe2, 0x4f, 0xa0, 0x27,
	0xc6, 0x64, 0x59, 0xac, 0x09, 0x61, 0x69, 0x91, 0x65, 0xc1, 0xfb, 0x04, 0x8c, 0xa7, 0x51, 0x10,
	0xe2, 0x7e, 0xc1, 0xa8, 0x82, 0xaa, 0xf0, 0xac, 0x24, 0x88, 0x04, 0xd2, 0xbc, 0x07, 0xd0, 0x66,
	0xde, 0x8c, 0xa8, 0xee, 0x51, 0x8b, 0xe2, 0xdd, 0xc1, 0x9d, 0x34, 0x5b, 0x9e, 0x1f, 0xa5, 0xe7,
	0x19, 0xda, 0x83, 0xdd, 0x20, 0xcc, 0x27, 0x41, 0x36, 0x99, 0x63, 0xb1, 0x51, 0xca, 0xe4, 0x79,
	0x43, 0x68, 0x0f, 0x31, 0x28, 0x28, 0x1a, 0x17, 0x57, 0x41, 0x34, 0xd7, 0x85, 0x39, 0x60, 0xcd,
	0x96, 0x98, 0x74, 0x19, 0xb2, 0xaf, 0xa0, 0xad, 0x71, 0x16, 0xcc, 0xe7, 0x71, 0xd9, 0x58, 0x7f,
	0x2a, 0xe0, 0x08, 0x21, 0x99, 0x5a, 0x0c, 0x0b, 0xc2, 0x30, 0x4a, 0xf2, 0xf8, 0x3f, 0x44, 0x66,
	0xa9, 0xd3, 0x68, 0x47, 0xad, 0x59, 0x68, 0x7b, 0xa0, 0xf7, 0xc1, 0xc0, 0xbe, 0xf9, 0x65, 0xe6,
	0x1a, 0x74, 0x6c, 0xbb, 0xbc, 0x56, 0xa7, 0x74, 0x19, 0x79, 0x60, 0x15, 0x85, 0xc8, 0x5c, 0xf3,
	0xb6, 0xda, 0x54, 0xce, 0x2c, 0x7a, 0xed, 0x5a, 0x05, 0xbf, 0x36, 0x8d, 0x92, 0xcc, 0xb5, 0xb1,
	0xb3, 0xfe, 0xb4, 0xe5, 0x28, 0xde, 0x6f, 0x0a, 0x99, 0x91, 0xe8, 0x88, 0x0a, 0x27, 0xba, 0xae,
	0x21, 0x3d, 0x15, 0x5d, 0xfa, 0x76, 0x5d, 0x46, 0x45, 0x97, 0xc9, 0x75, 0xfd, 0xaa, 0x00, 0xaa,
	0xe8, 0xe2, 0xad, 0x57, 0x8a, 0x51, 0x6a, 0x62, 0x5a, 0x42, 0x46, 0xd5, 0x8d, 0x8c, 0x6a, 0xe5,
	0x60, 0x11, 0x52, 0xbd, 0x42, 0x6a, 0x94, 0xa4, 0x68, 0x1f, 0x3a, 0x44, 0xf7, 0x2c, 0xcf, 0xa3,
	0xe9, 0x64, 0x43, 0xd0, 0x5d, 0xb2, 0x1b, 0x08, 0x7a, 0x06, 0x17, 0x15, 0x6e, 0xd6, 0x69, 0x3f,
	0x03, 0x5c, 0x6f, 0x26, 0xf1, 0x34, 0x85, 0xf1, 0x65, 0xb9, 0x61, 0xfc, 0x53, 0xd2, 0x86, 0xd0,
	0xbd, 0xde, 0x84, 0x79, 0xbf, 0x28, 0x60, 0x8f, 0xd3, 0x55, 0x9f, 0x66, 0xe5, 0x2a, 0x1f, 0x24,
	0xb6, 0x82, 0xb6, 0xbd, 0x15, 0x1a, 0xaa, 0xe2, 0xbd, 0x86, 0x0e, 0x97, 0x70, 0xfa, 0x63, 0x9c,
	0x5e, 0x49, 0x07, 0x4f, 0xe4, 0xbf, 0x69, 0x04, 0xef, 0x77, 0x3c, 0xdf, 0x98, 0xf3, 0x4d, 0x1c,
	0x0c, 0xbc, 0xf5, 0xec, 0x6d, 0x4a, 0xfb, 0x9f, 0xf6, 0x1f, 0x17, 0x1c, 0xbc, 0x15, 0xff, 0x80,
	0xf1, 0xf9, 0xa4, 0x8c, 0xc3, 0x64, 0xdd, 0x82, 0x1e, 0xb7, 0xf0, 0x80, 0x26, 0x35, 0xdd, 0x83,
	0x2e, 0x37, 0x15, 0xbb, 0x97, 0x25, 0xdd, 0xbd, 0x3e, 0x3e, 0x03, 0xa3, 0xd8, 0xc7, 0x2c, 0xd0,
	0x4e, 0x06, 0x27, 0x3e, 0xbe, 0x4b, 0x74, 0xf1, 0x56, 0x3d, 0xf2, 0x8f, 0xfa, 0x7d, 0x7f, 0x38,
	0xf6, 0x9f, 0xe1, 0x91, 0x44, 0xd0, 0x11, 0x16, 0x26, 0xfe, 0xd7, 0xf8, 0x7a, 0xb1, 0x03, 0x16,
	0xf7, 0x50, 0x71, 0x65, 0xed, 0xfe, 0xe0, 0xe5, 0xcb, 0xaf, 0xc6, 0xe4, 0x55, 0x23, 0x46, 0xff,
	0x3b, 0xbf, 0xff, 0x8a, 0xbc, 0xe9, 0x87, 0x7f, 0x59, 0xd0, 0x7e, 0x8e, 0x2f, 0x4c, 0x23, 0x46,
	0x8d, 0x3e, 0x02, 0x8d, 0x9c, 0x16, 0x68, 0x2d, 0x86, 0x9d, 0x37, 0xfb, 0x1d, 0xbe, 0xc0, 0x6e,
	0x50, 0x37, 0xd0, 0x43, 0xb0, 0x69, 0x5e, 0xa9, 0xff, 0x5b, 0x1b, 0xfe, 0xd4, 0x22, 0x01, 0x1d,
	0x80, 0xc9, 0xce, 0xcb, 0x08, 0xf5, 0xb8, 0xb1, 0x3c, 0x41, 0x25, 0xfe, 0x9f, 0xc3, 0x0e, 0x23,
	0x29, 0x40, 0x6f, 0xd7, 0x40, 0x4d, 0x4c, 0x8f, 0xa1, 0x23, 0x22, 0xf1, 0xe5, 0xc4, 0x95, 0x63,
	0xc7, 0xa7, 0x12, 0xf4, 0x07, 0xa0, 0xd1, 0x3b, 0xc2, 0x0e, 0xb7, 0xe0, 0x8b, 0x88, 0xc4, 0xef,
	0x7e, 0x91, 0x04, 0xea, 0xbc, 0x36, 0xd3, 0x0b, 0x89, 0xc4, 0xfd, 0x11, 0xae, 0x16, 0xd3, 0x73,
	0xb4, 0x9c, 0x52, 0xcc, 0x9e, 0x44, 0x54, 0x30, 0x95, 0x40, 0xfb, 0x70, 0x53, 0xfc, 0x9e, 0x12,
	0xbf, 0x2f, 0xc5, 0x37, 0x25, 0xe5, 0x01, 0x49, 0x3f, 0x39, 0x96, 0x23, 0xa1, 0x62, 0xc2, 0x41,
	0x2d, 0x81, 0x7c, 0xc1, 0x2b, 0xc0, 0x70, 0xb7, 0x64, 0xb8, 0x26, 0x3e, 0x0c, 0x16, 0x67, 0x51,
	0x00, 0x6f, 0x8e, 0xa8, 0x04, 0xec, 0x43, 0x8f, 0x15, 0x48, 0x8c, 0xf0, 0x5e, 0x63, 0x84, 0x26,
	0x0d, 0x9f, 0x81, 0xbd, 0x86, 0x8b, 0xfd, 0xb3, 0x9d, 0xfd, 0x09, 0xef, 0x9f, 0x12, 0xfb, 0xae,
	0x1c, 0xdb, 0xc4, 0xfb, 0x88, 0xde, 0xaa, 0x98, 0xdf, 0xe0, 0xb8, 0xd2, 0x7d, 0x95, 0x63, 0x52,
	0x02, 0xfd, 0x14, 0x8c, 0x82, 0xf3, 0x26, 0xb7, 0x6d, 0x15, 0x8b, 0xb9, 0xa8, 0x8c, 0x02, 0xe5,
	0x4a, 0x50, 0xcd, 0x13, 0x69, 0x14, 0xa7, 0x17, 0x12, 0x53, 0xcb, 0xd6, 0xa4, 0x13, 0xd9, 0x16,
	0x8f, 0x9a, 0x77, 0xea, 0x20, 0x6a, 0xa8, 0x23, 0xcf, 0x0c, 0xfa, 0x37, 0xf6, 0xf0, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x15, 0xc7, 0x12, 0xe6, 0xa2, 0x0d, 0x00, 0x00,
}
